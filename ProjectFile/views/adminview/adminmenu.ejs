<!DOCTYPE html> 
<html lang="en"> 
<head>
    <meta charset="UTF-8"> <!-- Sets character encoding to UTF-8 to support all characters -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0"> <!-- Ensures proper scaling for responsive design -->
    <title>Paris Sweet Patisserie - Admin Menu</title> <!-- Sets the page title displayed on the browser tab -->
    
    <!-- Links to an external CSS file for styling the admin menu page -->
    <link rel="stylesheet" href="../css/admin_menu_styles.css">
    
    <!-- Imports the Dancing Script font from Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script&display=swap" rel="stylesheet">
</head>
<body>
    <!-- Includes the login navbar partial template using EJS templating -->
    <%- include('../partials/loginnavbar') %>

    <!-- Main heading of the admin menu management page -->
    <h1 class="header">Admin Menu Management</h1>

    <!-- Section containing the update menu item button and form -->
    <div class="admin-update-section">
        <!-- Button to toggle the visibility of the update form -->
        <button class="update-btn" onclick="toggleUpdateForm()">Update Menu Item</button>

        <!-- Container for the update form, initially hidden -->
        <div id="updateFormContainer" style="display: none; margin-top: 20px;">
            <!-- Form for updating menu items, allowing file uploads -->
            <form id="updateForm" enctype="multipart/form-data">
                
                <!-- Dropdown to select which menu item to update -->
                <label for="menu-item-select">Select Item to Update:</label>
                <select id="menu-item-select" name="productID" required>
                    <option value="" disabled selected>Select a product to update</option>
                    
                    <!-- Iterates over the menu items, grouping them by category -->
                    <% Object.keys(menuItems).forEach(function(category) { %>
                        <optgroup label="<%= category %>"> <!-- Creates a category group -->
                            <% menuItems[category].forEach(function(item) { %>
                                <!-- Option for each product, showing the name and storing the ID -->
                                <option value="<%= item.ProductID %>"><%= item.ProductName %></option>
                            <% }); %>
                        </optgroup>
                    <% }); %>
                </select>
                <br><br>

                <!-- Input field for updating the product name -->
                <label for="newName">Updated Name:</label>
                <input type="text" id="newName" name="newName" placeholder="Leave blank to keep current name">
                <br><br>

                <!-- Input field for updating the product description -->
                <label for="newDescription">Updated Description:</label>
                <input type="text" id="newDescription" name="newDescription" placeholder="Leave blank to keep current description">
                <br><br>

                <!-- Input field for updating the product price -->
                <label for="newPrice">Updated Price:</label>
                <input type="number" step="0.01" id="newPrice" name="newPrice" placeholder="Leave blank to keep current price">
                <br><br>

                <!-- Input field for updating the product size -->
                <label for="newSize">Updated Size:</label>
                <input type="text" id="newSize" name="newSize" placeholder="Leave blank to keep current size">
                <br><br>

                <!-- Dropdown to select a new category for the product -->
                <label for="newCategory">Updated Category:</label>
                <select id="newCategory" name="newCategory">
                    <option value="" disabled selected>Select a new category</option>
                    <% Object.keys(menuItems).forEach(function(category) { %>
                        <option value="<%= category %>"><%= category %></option>
                    <% }); %>
                </select>
                <br><br>

                <!-- Input field for uploading a new product image -->
                <label for="newImage">Upload New Image:</label>
                <input type="file" id="newImage" name="productImage">
                <br><br>

                <!-- Button to submit the update form -->
                <button type="submit">Submit Updates</button>
            </form>

            <!-- Message display area for update form feedback -->
            <div id="updateMessage" style="margin-top: 10px;"></div>
        </div>
    </div>
    <br>

    <!-- Section for menu category tabs -->
    <div class="tabs">
        <% 
            // Defines the order in which categories should be displayed
            const categoryOrder = ["Breakfast", "Appetizers", "Soups", "Salads", "Sandwiches", "asdsad"];

            // Loops through each category and creates a tab if it exists in menuItems
            categoryOrder.forEach(function(category) {
                if (menuItems[category]) { %>
                    <div class="tab" data-tab="<%= category %>">
                        <%= category %> <!-- Displays the category name -->
                    </div>
        <%      }
            });
        %>
    </div>

    <!-- Section for displaying menu items -->
    <div id="menu">
        <% 
            // Loops through each category and displays menu items within it
            categoryOrder.forEach(function(category) {
                if (menuItems[category]) { %>
                    <div class="menu-container" data-content="<%= category %>">
                        <h2><%= category %></h2> <!-- Displays the category title -->
                        <div class="menu-items">
                            <% 
                                // Loops through each item in the category and creates an entry
                                menuItems[category].forEach(function(item) { %>
                                    <div class="menu-item" data-id="<%= item.ProductID %>">
                                        <h3><%= item.ProductName %></h3> <!-- Displays the product name -->
                                        
                                        <!-- Displays the product image, using a default if none exists -->
                                        <img src="<%= item.ProductImage || '/photo/default-image.jpg' %>" 
                                             alt="<%= item.ProductName %>" 
                                             class="menu-image">
                                        
                                        <!-- Displays the product description -->
                                        <p><strong>Description:</strong> <%= item.ProductDescription %></p>
                                        
                                        <!-- Displays the product price -->
                                        <p><strong>Price:</strong> $<%= item.ProductPrice %></p>
                                        
                                        <!-- Displays the product size or 'N/A' if not provided -->
                                        <p><strong>Size:</strong> <%= item.ProductSize || 'N/A' %></p>
                                    </div>
                            <% }); %>
                        </div>
                    </div>
        <%      }
            });
        %>
    </div>

    <!-- Includes the footer partial template using EJS -->
    <%- include('../partials/footer') %>

    <script src="../js/menu.js"></script> <!-- Link to an external JavaScript file (menu.js) that may contain additional functionality for the page. -->

    <script>
        // Function to toggle the visibility of the update form.
        function toggleUpdateForm() {
            var form = document.getElementById("updateFormContainer"); // Get the element with ID 'updateFormContainer'.
            // Check the current display style of the form and toggle it between 'none' and 'block'.
            form.style.display = (form.style.display === "none" || form.style.display === "") ? "block" : "none"; 
        }
    
        // Wait for the DOM to be fully loaded before executing the script.
        document.addEventListener("DOMContentLoaded", function () {
            const tabs = document.querySelectorAll(".tab"); // Select all elements with the 'tab' class.
            const contents = document.querySelectorAll(".menu-container"); // Select all elements with the 'menu-container' class.
            const storedTab = localStorage.getItem("activeTab"); // Retrieve the stored active tab from localStorage.
    
            // If a stored tab exists in localStorage, set it as the active tab, else default to the first tab.
            if (storedTab) {
                setActiveTab(storedTab);
            } else {
                setActiveTab(tabs[0]?.getAttribute("data-tab"));
            }
    
            // Add event listeners to each tab element to handle tab switching.
            tabs.forEach(tab => {
                tab.addEventListener("click", function () {
                    const selectedTab = this.getAttribute("data-tab"); // Get the 'data-tab' attribute of the clicked tab.
                    localStorage.setItem("activeTab", selectedTab); // Store the selected tab in localStorage.
                    setActiveTab(selectedTab); // Set the clicked tab as the active tab.
                });
            });
    
            // Function to update the active tab and the visibility of corresponding content.
            function setActiveTab(tabName) {
                tabs.forEach(tab => {
                    // Add the 'active' class to the tab that matches the 'data-tab' attribute with the tabName.
                    tab.classList.toggle("active", tab.getAttribute("data-tab") === tabName); 
                });
    
                contents.forEach(content => {
                    // Show the content that matches the 'data-content' attribute with the tabName and hide the others.
                    content.style.display = content.getAttribute("data-content") === tabName ? "block" : "none"; 
                });
            }
        });
    
        // Async function to handle form submission.
        async function submitForm(event) {
            event.preventDefault(); // Prevent the default form submission behavior.
    
            // Get form field values and trim them to remove unnecessary spaces.
            const productSelect = document.getElementById("menu-item-select"); 
            const newName = document.getElementById("newName").value.trim(); 
            const newDescription = document.getElementById("newDescription").value.trim(); 
            const newPrice = document.getElementById("newPrice").value.trim(); 
            const newSize = document.getElementById("newSize").value.trim(); 
            const newCategory = document.getElementById("newCategory").value;
            const newImage = document.getElementById("newImage").files.length > 0; // Check if an image file is selected.
    
            // Check if a product is selected, if not, show an error message.
            if (!productSelect.value) {
                document.getElementById("updateMessage").innerHTML = "<p style='color: red;'>You must select a product to update.</p>";
                return; // Exit the function if no product is selected.
            }
    
            // Check if at least one field is provided to update, if not, show an error message.
            if (!newName && !newDescription && !newPrice && !newSize && !newCategory && !newImage) {
                document.getElementById("updateMessage").innerHTML = "<p style='color: red;'>Please type what you want to update.</p>";
                return; // Exit the function if no fields are filled to update.
            }
    
            // Create a FormData object from the form element to easily send form data, including files.
            const formData = new FormData(document.getElementById("updateForm"));
            
            // Use the Fetch API to send the form data via a POST request to the server.
            const response = await fetch('/update-product', {
                method: 'POST', // HTTP method POST.
                body: formData, // Send the form data as the body of the request.
            });
    
            // Parse the response from the server.
            const result = await response.json(); 
            const messageDiv = document.getElementById("updateMessage"); // Get the element where messages will be displayed.
    
            // If the response is OK, display a success message and reload the page after a short delay.
            if (response.ok) {
                messageDiv.innerHTML = `<p style="color: green;">${result.message}</p>`;
                const activeTab = localStorage.getItem("activeTab"); // Retrieve the active tab from localStorage.
                setTimeout(() => {
                    location.reload(); // Reload the page after 1 second.
                    localStorage.setItem("activeTab", activeTab); // Restore the active tab in localStorage.
                }, 1000);
            } else {
                // If the response is not OK, display an error message.
                messageDiv.innerHTML = `<p style="color: red;">${result.message}</p>`;
            }
        }
    
        // Add an event listener to the form to trigger the submitForm function when the form is submitted.
        document.getElementById("updateForm").addEventListener("submit", submitForm);
    </script>
    
</body>
</html>